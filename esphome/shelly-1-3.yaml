substitutions:
  device: nook-light-shelly1
  Name: Nook Shelly1
  SSID: !secret wifi_iot_ssid
  SSID_PWD: !secret wifi_iot_password
  FB_PWD: !secret esphome_fallback_ap_password
  ESP_PWD: !secret esphome_password
#  IP_Addr: 192.168.1.45

esphome:
  name: ${device}
  platform: ESP8266
  board: esp01_1m

wifi:
  ssid: ${SSID}
  password: ${SSID_PWD}
#  manual_ip:
#    static_ip: ${IP_Addr}
#    gateway: 192.168.1.1
#    subnet: 255.255.255.0
#    dns1: 192.168.1.1
  ap:
    ssid: "${Name} Hotspot"
    password: ${FB_PWD}

captive_portal:

web_server:
  port: 80

time:
  - platform: homeassistant
    id: homeassistant_time

logger:

api:
  password: ${ESP_PWD}

ota:
  password: ${ESP_PWD}

# Sensors with general information.
sensor:
  # Uptime sensor.
  - platform: uptime
    name: ${Name} Uptime Sensor
    id: uptime_sensor
    update_interval: 60s
    on_raw_value:
      then:
        - text_sensor.template.publish:
            id: uptime_human
            state: !lambda |-
              int seconds = round(id(uptime_sensor).raw_state);
              int days = seconds / (24 * 3600);
              seconds = seconds % (24 * 3600);
              int hours = seconds / 3600;
              seconds = seconds % 3600;
              int minutes = seconds /  60;
              seconds = seconds % 60;
              return (
                (days ? to_string(days) + " days " : "") +
                (hours ? to_string(hours) + " hrs " : "") +
                (minutes ? to_string(minutes) + " mins " : "") +
                (to_string(seconds) + " secs")
              ).c_str();

  # WiFi Signal sensor.
  - platform: wifi_signal
    name: ${Name} WiFi Signal
    update_interval: 60s

binary_sensor:
  - platform: status
    name: "${Name} Status"

  - platform: gpio
    name: ${Name} Input
    pin:
      number: GPIO5
    # small delay to prevent debouncing
    filters:
      - delayed_on_off: 50ms
    # config for state change of input button
    on_state:
        then:
          - if:
              condition:
                and:
                  - wifi.connected:
                  - api.connected:
                  - switch.is_on: shelly_relay
              # toggle smart light if wifi and api are connected and relay is on
              then:
                - homeassistant.service:
                    service: light.toggle
                    data:
                      entity_id: light.nook_light
              # else, toggle relay
              else:
                - switch.toggle: shelly_relay
    id: button

# Text sensors with general information.
text_sensor:
  # Expose ESPHome version as sensor.
  - platform: version
    name: ${Name} ESPHome Version
  # Expose WiFi information as sensors.
  - platform: wifi_info
    ip_address:
      name: ${Name} IP
    ssid:
      name: ${Name} SSID
    bssid:
      name: ${Name} BSSID

  - platform: template
    name: ${Name} Uptime
    id: uptime_human
    icon: mdi:clock-start
    
# Shelly 1 detached switch config with fallback in case of wifi or api fail

switch:
  - platform: restart
    name: "${Name} Restart"
    
  - platform: gpio
    name: ${Name}
    pin: GPIO4
    id: shelly_relay
    icon: "mdi:electric-switch"
    # after reboot, keep the relay off. this prevents light turning on after a power outage
    restore_mode: ALWAYS_On
